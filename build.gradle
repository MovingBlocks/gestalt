/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven {
            url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        // Artifactory plugin
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.7.3')
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven {
            url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
        }
    }
}

// Library and distribution config
description = 'A set of libraries providing core capabilities for games and game engines'

task clean(type: Delete) {
    delete rootProject.buildDir
}

configure(subprojects.findAll { !it.name.contains("testpack") && !it.name.startsWith("module") && !it.name.contains("android")}) {
    // General Java configuration
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'

    // Set the expected module Java level (can use a higher Java to run, but should not use features from a higher Java)
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        manifest {
            attributes("Implementation-Title": project.name, "Implementation-Version": version)
        }
        from(['LICENSE'])
    }

    task sourceJar(type: Jar) {
        description = "Create a JAR with all sources"
        from sourceSets.main.allSource
        from sourceSets.test.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        description = "Create a JAR with the JavaDoc for the java sources"
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    // A configuration for publishing artifacts
    configurations {
        published
    }

    // Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
    artifacts {
        published jar
        published sourceJar
        published javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact jar {
                }
                artifact sourceJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
            }
        }
    }

    // This configures what we need to interact with the Terasology Artifactory instance. It is primarily for local test publishing
    // Artifactory config in Jenkins can supply overrides for the following
    artifactory {
        contextUrl = 'http://artifactory.terasology.org/artifactory'

        // This is the target for publishing artifacts. Unless testing locally usually the setting in Jenkins is used
        publish {
            repository {
                // The repoKey can be overridden in Jenkins and via local gradle.properties if desired for testing
                if (rootProject.hasProperty("artifactoryPublishRepo")) {
                    repoKey = artifactoryPublishRepo
                } else {
                    repoKey = 'terasology-snapshot-local'
                }

                // User and pass are overridden in Jenkins. You can supply your own for manual use in a local prop file, such as gradle.properties
                // This way we make it so you can run locally without having the user/pass set - but if the artifactoryPublish task is called it'll fail
                if (rootProject.hasProperty("artifactoryUser") && rootProject.hasProperty("artifactoryPass")) {
                    username = "$artifactoryUser"
                    password = "$artifactoryPass"
                }
                // Note that republishing artifacts under the same name (without an incremented SNAPSHOT for instance) may fail with "Forbidden"
            }

            defaults {
                publications('mavenJava')
            }
        }
    }

    // Technically the plain "jar" both here and above is included automatically, but leaving it explicit for clarity
    artifactoryPublish {
        dependsOn jar, sourceJar, javadocJar
    }

    checkstyle {
        ignoreFailures = true
        configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
        configProperties.samedir = new File(rootDir, "config/checkstyle")
        toolVersion = "6.5"
    }

    pmd {
        // Set PMD to an older version than Gradle default - the pmd.xml needs to be updated for a newer PMD version
        toolVersion = '4.3'
        ignoreFailures = true
        ruleSetFiles = files(new File(rootDir, "config/pmd/pmd.xml"))
    }

    findbugs {
        toolVersion = '3.0.0'
        ignoreFailures = true
        effort = 'max'
        reportLevel = 'medium'
        excludeFilter = new File(rootDir, "config/findbugs/findbugs-exclude.xml")
    }

    javadoc {
        failOnError = false
    }
}
