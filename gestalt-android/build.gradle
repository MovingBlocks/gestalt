// Copyright 2021 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        lintConfig file("lintconfig.xml")
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api(project(':gestalt-module')) {
        exclude group: 'org.javassist', module: 'javassist'
    }
    implementation project(':gestalt-util')
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

project.afterEvaluate {
    publishing {
        repositories {
            maven {
                name = 'TerasologyOrg'
                allowInsecureProtocol true // ğŸ˜± - no https on our Artifactory yet

                if (rootProject.hasProperty("publishRepo")) {
                    // This first option is good for local testing, you can set a full explicit target repo in gradle.properties
                    url = "http://artifactory.terasology.org/artifactory/$publishRepo"

                    logger.info("Changing PUBLISH repoKey set via Gradle property to {}", publishRepo)
                } else {
                    // Support override from the environment to use a different target publish org
                    String deducedPublishRepo = System.getenv()["PUBLISH_ORG"]
                    if (deducedPublishRepo == null || deducedPublishRepo == "") {
                        // If not then default
                        deducedPublishRepo = "libs"
                    }

                    // Base final publish repo on whether we're building a snapshot or a release
                    if (project.version.endsWith('SNAPSHOT')) {
                        deducedPublishRepo += "-snapshot-local"
                    } else {
                        deducedPublishRepo += "-release-local"
                    }

                    logger.info("The final deduced publish repo is {}", deducedPublishRepo)
                    url = "http://artifactory.terasology.org/artifactory/$deducedPublishRepo"
                }

                if (rootProject.hasProperty("mavenUser") && rootProject.hasProperty("mavenPass")) {
                    credentials {
                        username = "$mavenUser"
                        password = "$mavenPass"
                    }
                    authentication {
                        basic(BasicAuthentication)
                    }
                }
            }
        }
        publications {
            maven(MavenPublication) {
                artifactId = project.name
                version = project.version

                artifact bundleReleaseAar
                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('groupId', '*')
                            exclusionNode.appendNode('artifactId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                exclusionNode.appendNode('groupId', rule.group ?: '*')
                                exclusionNode.appendNode('artifactId', rule.module ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "api" dependencies (for new Gradle) as "compile" dependencies
                    configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                }
            }
        }
    }
}
