// Copyright 2021 The Terasology Foundation
// SPDX-License-Identifier: Apache-2.0
import com.google.common.base.Predicate
import org.reflections.Reflections
import org.reflections.scanners.ResourcesScanner
import org.reflections.scanners.SubTypesScanner
import org.reflections.scanners.TypeAnnotationsScanner
import org.reflections.serializers.JsonSerializer
import org.reflections.util.ConfigurationBuilder

import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'project-report'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.terasology.gestalt.android.testbed"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all {
        variant ->
            def t = task("reflect${variant.name.capitalize()}") {
                description = "Generates reflections manifest for variant ${variant.name}"

                doLast {
                    reflectPackage("org.terasology.gestalt.android.testbed.packageModuleA", variant)
                    reflectPackage("org.terasology.gestalt.android.testbed.packageModuleB", variant)
                }
            }
            variant.assembleProvider.get().dependsOn(t)
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(':gestalt-android')
    implementation project(':gestalt-asset-core')
    implementation project(":gestalt-entity-system")
    implementation "com.google.guava:guava:$guava_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation 'com.github.tony19:logback-android:1.3.0-3'
    implementation project(':testpack:testpack-api')
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def reflectPackage(packageName, variant) {
    def resourcesPath = variant.sourceSets.find { it.name == 'main' }.resources.srcDirs
    def classPath = files { variant.javaCompileProvider.get().destinationDir }
    URL[] scanUrls = classPath.collect { it.toURI().toURL() } + resourcesPath.collect {
        it.toURI().toURL()
    }
    URL[] classLoaderUrls = scanUrls + variant.javaCompileProvider.get().classpath.collect {
        it.toURI().toURL()
    } + [new File(android.sdkDirectory, "platforms/" + android.compileSdkVersion + "/android.jar").toURI().toURL()]

    ClassLoader classLoader = new URLClassLoader(classLoaderUrls, getClass().getClassLoader())
    org.reflections.Configuration config = new ConfigurationBuilder()
    config.addClassLoader(classLoader)
    config.setUrls(scanUrls)
    config.filterInputsBy(new Predicate<String>() {
        @Override
        boolean apply(@javax.annotation.Nullable String s) {
            return packageName.isEmpty() || s.startsWith(packageName + ".")
        }
    })

    config.addScanners(new ResourcesScanner(), new SubTypesScanner(false), new TypeAnnotationsScanner().filterResultsBy())
    Reflections reflections = new Reflections(config)
    JsonSerializer serializer = new JsonSerializer()
    def outPath = variant.javaCompileProvider.get().destinationDir.toString() + "/" + packageName.replaceAll(Pattern.quote("."), "/") + "/manifest.json"
    serializer.save(reflections, outPath)
}
