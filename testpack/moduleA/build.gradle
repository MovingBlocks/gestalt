import com.google.common.base.Predicate

import java.util.regex.Pattern

/*
 * Copyright 2015 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */
import org.reflections.Reflections
import org.reflections.scanners.ResourcesScanner
import org.reflections.scanners.SubTypesScanner
import org.reflections.scanners.TypeAnnotationsScanner
import org.reflections.serializers.JsonSerializer

apply plugin: 'java'

jar {
    version = ''
}

buildscript {
    repositories {
        mavenLocal()
        google()
        jcenter()
    }
    dependencies {
        classpath 'org.reflections:reflections:0.9.12-SNAPSHOT'
    }
}

dependencies {
    implementation project(":testpack:testpack-api")
}

def reflect() {
    def resourcesPath = sourceSets.find{it.name == 'main'}.resources.srcDirs
    def classPath = files {compileJava.destinationDir}
    URL[] scanUrls = classPath.collect {it.toURI().toURL()} + resourcesPath.collect {it.toURI().toURL()}
    URL[] classLoaderUrls = scanUrls + compileJava.classpath.collect {it.toURI().toURL()}

    ClassLoader classLoader = new URLClassLoader(classLoaderUrls, getClass().getClassLoader())
    org.reflections.Configuration config = new org.reflections.util.ConfigurationBuilder()
    config.addClassLoader(classLoader)
    config.setUrls(scanUrls)

    config.addScanners(new ResourcesScanner(), new SubTypesScanner(false), new TypeAnnotationsScanner().filterResultsBy())
    Reflections reflections = new Reflections(config)
    JsonSerializer serializer = new JsonSerializer()
    def outPath = compileJava.destinationDir.toString() + "/manifest.json"
    serializer.save(reflections, outPath)
}

compileJava.doLast {
    reflect()
}
